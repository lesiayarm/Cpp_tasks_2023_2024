#pragma once

#include <cstddef>
#include <string>
#include <vector>

struct State {
    int ref_count{};
    std::vector<std::string> vector;
};

class COWVector {
   public:
    COWVector() : state_(new State) {  // NOLINT(cppcoreguidelines-owning-memory)
        state_->ref_count = 1;
    }

    ~COWVector() {
        if (state_ == nullptr) {
            return;
        }
        --state_->ref_count;
        if (state_->ref_count == 0) {
            delete state_;
        }
    }

    COWVector(const COWVector& other) : state_(other.state_) {
        ++state_->ref_count;
    }

    COWVector(COWVector&& other) noexcept : state_(other.state_) {
        other.state_ = nullptr;
    }

    COWVector& operator=(const COWVector& other) {
        if (this != &other) {
            --state_->ref_count;
            if (state_->ref_count == 0) {
                delete state_;
            }
            state_ = other.state_;
            ++state_->ref_count;
        }
        return *this;
    }

    COWVector& operator=(COWVector&& other) noexcept {
        if (this != &other) {
            --state_->ref_count;
            if (state_->ref_count == 0) {
                delete state_;
            }
            state_ = other.state_;
            ++state_->ref_count;
        }
        return *this;
    }

    [[nodiscard]] size_t Size() const {
        return state_->vector.size();
    }

    void Resize(size_t size) {
        if (size == state_->vector.size()) {
            return;
        }
        if (state_->ref_count == 1) {
            state_->vector.resize(size);
            return;
        }
        --state_->ref_count;
        state_ = new State{1, state_->vector};  // NOLINT(cppcoreguidelines-owning-memory)
        state_->vector.resize(size);
    }

    [[nodiscard]] const std::string& Get(size_t at) const {
        return state_->vector[at];
    }

    [[nodiscard]] const std::string& Back() const {
        return state_->vector[state_->vector.size() - 1];
    }

    void PushBack(const std::string& value) {
        if (state_->ref_count == 1) {
            state_->vector.push_back(value);
            return;
        }
        --state_->ref_count;
        state_ = new State{1, state_->vector};  // NOLINT(cppcoreguidelines-owning-memory)
        state_->vector.push_back(value);
    }

    void Set(size_t at, const std::string& value) {
        if (state_->vector[at] == value) {
            return;
        }
        if (state_->ref_count == 1) {
            state_->vector[at] = value;
            return;
        }
        --state_->ref_count;
        state_ = new State{1, state_->vector};  // NOLINT(cppcoreguidelines-owning-memory)
        state_->vector[at] = value;
    }

   private:
    State* state_{};
};
